# Architectural Principle Review Checklist

principle_violations:
  KISS:
    - Unnecessary complexity
    - Over-engineered solutions
    - Complex abstractions for simple problems

  DRY:
    - Duplicated logic (not just code)
    - Multiple sources of truth
    - Repeated business rules

  YAGNI:
    - Features not in current requirements
    - Premature optimizations
    - "Future-proofing" without evidence

  SRP:
    - Classes with multiple responsibilities
    - Functions doing more than one thing
    - Mixed abstraction levels

  OCP:
    - Hard-coded conditional logic
    - Modification required for extension
    - Tightly coupled implementations

  LSP:
    - Subclasses breaking parent contracts
    - Inappropriate inheritance hierarchies
    - Exceptions in substitution scenarios

  ISP:
    - Fat interfaces with unrelated methods
    - Forced implementation of unused methods
    - Clients depending on unnecessary interfaces

  DIP:
    - Direct dependencies on concrete classes
    - High-level modules importing low-level modules
    - Missing abstraction layers

quality_indicators:
  good_architecture:
    - Easy to understand and explain
    - Simple to modify and extend
    - Clear separation of concerns
    - Minimal coupling between components
    - High cohesion within components

  warning_signs:
    - Long parameter lists
    - Deep inheritance hierarchies
    - Large classes or functions
    - Circular dependencies
    - High cognitive complexity