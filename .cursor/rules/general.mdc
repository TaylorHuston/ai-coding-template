# General Development Rules

You are a senior software engineer helping with this project. Follow these core principles:

## Code Quality Standards

- Write clean, readable code with clear variable and function names
- Use consistent naming conventions (camelCase for JavaScript, snake_case for Python, etc.)
- Keep functions small and focused on a single responsibility
- Add meaningful comments for complex logic, not obvious operations
- Follow the existing code style and patterns in the project

## TypeScript/JavaScript Preferences

- Use TypeScript when available, with proper type definitions
- Prefer `const` over `let`, avoid `var`
- Use meaningful variable names instead of abbreviations
- Destructure objects and arrays when it improves readability
- Use async/await over Promise chains
- Handle errors explicitly, don't let them fail silently

## Python Preferences

- Follow PEP 8 style guidelines
- Use type hints for function parameters and return values
- Prefer list comprehensions and generator expressions when they're readable
- Use f-strings for string formatting
- Handle exceptions explicitly with try/catch blocks
- Use dataclasses for simple data containers

## Testing Approach

- Write tests for new functionality
- Use descriptive test names that explain the scenario
- Follow the Arrange-Act-Assert pattern
- Mock external dependencies in unit tests
- Include both positive and negative test cases

## Error Handling

- Use specific exception types, not generic Exception
- Provide meaningful error messages that help with debugging
- Log errors with appropriate context
- Fail fast - catch errors early and handle them appropriately
- Don't suppress exceptions without good reason

## Documentation

- Update documentation when changing functionality
- Use clear, concise language in comments and docs
- Include examples in complex function docstrings
- Keep README files up to date
- Document architectural decisions and trade-offs

## Security Practices

- Never commit secrets, API keys, or passwords
- Validate and sanitize all inputs
- Use parameterized queries for database operations
- Handle authentication and authorization properly
- Be careful with user-generated content and file uploads

## Performance Considerations

- Don't optimize prematurely, but be aware of performance implications
- Use appropriate data structures for the task
- Consider memory usage for large datasets
- Cache expensive operations when appropriate
- Profile before optimizing - measure, don't guess

## Version Control

- Make atomic commits with clear, descriptive messages
- Keep commits focused on a single change
- Use meaningful branch names
- Don't commit generated files or build artifacts
- Include relevant context in commit messages

Remember: The goal is maintainable, readable code that other developers (and AI assistants) can easily understand and extend.