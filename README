# AI Coding Template

This repo serves as a starter template for new projects working with AI coding tools. This is based on my own experiences and will be constantly evolving based on that. Designed primarily for working with Claude Code and VSCode, but should be easily adaptable to other tools. Also based off my discoveries, trials, headaches and dead ends from building a NextJS app, but I will try and keep this framework as tech-stack agnostic as possible.

## Quick Context

AI coding tools are simultaneously very powerful and very dumb. Sometimes it can feel like working with the world's dumbest toddler. A lot of that comes down to the fact that, somewhat counterintuitively, they don't have a very good memory. We tend to to think of computers of having amazing memories. Able to store terabytes of data with perfect recall. Much more than our fallable human brains ever could. But that just isn't the case when working with LLMs. LLMs have something called a "context window" that's actually fairly limited. What this means in the real world is that your tool will eventually start "forgetting" what it's already implemented. It will write duplicate code. It will write code that breaks other code. It will write code that doesn't follow your established best practices. It will forget rules and instructions that you give it. Etc. Having a good framework and established patterns can go a long way to mitigating that.

## The AI-Assisted Development Lifecycle

- **Design and Architecture:** Use AI to brainstorm ideas, explore architectural patterns, and generate diagrams.
- **Code Generation:** Generate boilerplate code, functions, and even entire components.
- **Debugging:** Paste error messages and code snippets to get explanations and suggestions for fixes.
- **Testing:** Generate unit tests, integration tests, and end-to-end tests.
- **Documentation:** Generate documentation for functions, classes, and APIs.
- **Refactoring:** Improve code quality, readability, and performance.

## Advanced AI Orchestration

This template includes an advanced AI orchestration system in the `.claude/` directory that provides:

### ðŸ¤– Specialized AI Agents
- **10 domain-specific agents** for complex tasks (full-stack-developer, security-auditor, code-reviewer, etc.)
- **Intelligent agent coordination** with handoff procedures and quality gates
- **Context-aware agent selection** based on task complexity and domain

### âš¡ Command Workflows
- **7 pre-built command sequences** for common development operations
- **Reusable workflow patterns** for feature development, security audits, and performance optimization
- **Automated quality gates** integrated into development workflows

### ðŸ“Š Quality Enforcement
- **Automated rule enforcement** for documentation, security, testing, and code quality
- **Graduated enforcement levels** that adapt to project maturity
- **Continuous quality monitoring** with improvement recommendations

### ðŸ”„ Memory Management
- **Enhanced context preservation** across AI sessions
- **Project status tracking** in `status.md` with visual progress indicators
- **Issue-based development** workflow in `workbench/` directory

See [.claude/integration.md](./.claude/integration.md) for comprehensive integration guidance.

## File Structure

A well-organized file structure is crucial for providing context to AI tools. A logical structure helps the AI understand your project's architecture and locate relevant files without having to burn too much time and context searching around.

All documentation files should be named using `lowercase-kebab-case`.

Here's a recommended approach:

```text
project-root/
â”œâ”€â”€ README.md                 # Project overview and setup instructions
â”œâ”€â”€ prompting.md              # Best practices for prompting AI coding assistants
â”œâ”€â”€ legal.md                  # Legal and ethical considerations
â”œâ”€â”€ CLAUDE.md                 # Instructions for Claude Code (or similar AI tools)
â”œâ”€â”€ .claude/                  # Advanced AI orchestration system
â”‚   â”œâ”€â”€ agents/               # Specialized AI agents for complex tasks
â”‚   â”œâ”€â”€ commands/             # Reusable command workflows
â”‚   â”œâ”€â”€ rules/                # Quality enforcement rules
â”‚   â””â”€â”€ integration.md        # Integration guide
â”œâ”€â”€ .gitignore                # Standard gitignore for your tech stack
â”œâ”€â”€ docs/                     # Documentation and guides
â”‚   â”œâ”€â”€ architecture.md       # High-level system design
â”‚   â”œâ”€â”€ api-reference.md      # API documentation (if applicable)
â”‚   â””â”€â”€ contributing-guide.md # Development guidelines
â”œâ”€â”€ workbench/                # Issue-based development workflow
â”œâ”€â”€ status.md                 # Project memory and status tracking
â”œâ”€â”€ technical.md              # Technical specifications
â”œâ”€â”€ instructions.md           # Current task instructions
â”œâ”€â”€ src/                      # Main source code
â”‚   â”œâ”€â”€ components/           # Reusable components/modules
â”‚   â”œâ”€â”€ utils/                # Utility functions and helpers
â”‚   â”œâ”€â”€ config/               # Configuration files
â”‚   â””â”€â”€ tests/                # Test files (or __tests__ directories alongside code)
â”œâ”€â”€ scripts/                  # Professional build, deployment, and utility scripts
â”‚   â”œâ”€â”€ lib/                  # Shared utilities (colors.sh, logging.sh)
â”‚   â”œâ”€â”€ ai-status.sh          # AI-friendly project status dashboard
â”‚   â”œâ”€â”€ docs-health.js        # Documentation health monitoring
â”‚   â”œâ”€â”€ setup-manager.sh      # Unified project setup
â”‚   â””â”€â”€ docs-manager.sh       # Documentation operations
â”œâ”€â”€ templates/                # Documentation templates
â”œâ”€â”€ config/                   # Project configuration files
â””â”€â”€ examples/                 # Usage examples and sample code
```

## Best Practices for AI-Assisted Development

### 1. Documentation Standards

Follow comprehensive documentation standards to maintain consistency and quality. See [documentation-standards.md](./docs/documentation-standards.md) for complete guidelines on:
- Metadata requirements and formatting standards
- JSDoc standards for code documentation  
- Visual documentation with progress bars and diagrams
- Documentation review checklists and quality gates

### 2. Prompt Engineering

The quality of your prompts determines the quality of the AI's output. See [prompting.md](./prompting.md) for a detailed guide on how to write effective prompts.

### 3. Code Quality and Review

- **Treat AI Code as a Draft:** Always review and refine AI-generated code.
- **Keep Changes Small:** It's very tempting to ask your AI tool to implement entire features for you, to work for hours while you go get a snack and maybe watch a movie, but you can very quickly code yourself into a complete mess that way. Requests should be small, clear, concise and focused.
- **Scrutinize for Common Flaws:** Pay close attention to logical inconsistencies, security vulnerabilities, and missed edge cases.
- **Focus on the "Why":** Ensure the code aligns with the project's goals and architecture.

### 4. Testing and Validation

- **Test Rigorously:** Write comprehensive unit, integration, and acceptance tests for all code, especially AI-generated code.
- **Cover Edge Cases:** AI models may not always consider edge cases. It's your job to ensure they are handled correctly.

### 5. Security

- **Scan for Vulnerabilities:** Use static analysis security testing (SAST) tools to scan for vulnerabilities in both human- and AI-written code.
- **Never Trust, Always Verify:** Be especially cautious with security-critical code, such as authentication and encryption. Meticulously review and test any AI-generated code in these areas.

### 6. Version Control

- **Atomic Commits:** Generate code for a single, focused feature at a time and commit it with a clear message.
- **Tag AI-Assisted Commits:** Add a tag like `(AI-assisted)` to your commit messages to create a clear audit trail.
- **Use Branches:** Isolate AI-generated features in separate branches for testing before merging.

### 7. Legal and Ethical Considerations

Using AI-generated code has legal and ethical implications. See [legal.md](./legal.md) for a guide on how to navigate these issues. **Note I AM NOT A LAWYER.**

## Tooling and Automation

This template includes several automation tools to help maintain quality:

### Professional Script Infrastructure

The template includes a professional script infrastructure adapted from production systems:

#### Shared Utilities
- **colors.sh**: Standardized color output with emoji support and fallback ASCII
- **logging.sh**: Professional logging with levels, spinners, and progress bars

#### AI-Friendly Tools
- **AI Status Dashboard**: `./scripts/ai-status.sh` - Multi-format project status for AI context recovery
- **Documentation Health**: `node scripts/docs-health.js` - Comprehensive docs quality analysis
- **Setup Manager**: `./scripts/setup-manager.sh` - Unified project setup with quick/full modes
- **Docs Manager**: `./scripts/docs-manager.sh` - Centralized documentation operations

#### Usage Examples
```bash
# Quick project status for AI
./scripts/ai-status.sh --ai-format

# Complete project setup
./scripts/setup-manager.sh full --verbose

# Check documentation health
node scripts/docs-health.js

# Initialize docs structure
./scripts/docs-manager.sh init

# Validate docs before commit
./scripts/docs-manager.sh validate
```

See [script-architecture.md](./docs/script-architecture.md) for implementation details.

### Additional Tools

- **Static Analysis and Linters:** These tools help enforce coding standards and catch common errors in both human- and AI-written code.
- **Dependency Management:** Keep your dependency files (e.g., `package.json`, `requirements.txt`) clean and up-to-date to provide the AI with accurate context.
- **Version Control:** Use Git to track changes, experiment with AI-generated code, and collaborate with your team.

## Getting Started with this Template

1.  **Clone the repository**
2.  **Choose your tech stack**
3.  **Adapt the file structure**
4.  **Update documentation**
5.  **Start coding!**

## Contributing

This template is a living document. Contributions and suggestions are welcome! Please open an issue or submit a pull request with your ideas.
